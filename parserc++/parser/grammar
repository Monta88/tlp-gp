/* Parser PDDL */
/* pddl_3_1.y */
/* Authors : BENIER Alan, PRAT Nathan, LAGLEIZE Martin, JOMAA Montassar */

%scanner                ../scanner/Scanner.h
%scanner-token-function d_scanner.lex()

%start begin

%union
{
	std::string * name;
	std::vector<std::string *> * list_name;
	std::vector<NamedList *> * named_list;
}

%token 	L_P
	R_P
	L_B
	R_B
	NS_T
	EQ
	SLASH
	STAR
	PLUS
	GT
	LT
	GOE
	LOE
	NUM
	DEFINE
	DOMAIN
	REQUIREMENTS
	STRIPS
	TYPING
	NEGATIVE_PRECONDITIONS
	DISJUNCTIVE_PRECONDITIONS
	EQUALITY
	EXISTENTIAL_PRECONDITIONS
	UNIVERSAL_PRECONDITIONS
	QUANTIFIED_PRECONDITIONS
	CONDITIONAL_EFFECTS
	FLUENTS
	NUMERIC_FLUENTS
	OBJECT_FLUENTS
	ADL
	DURATIVE_ACTIONS
	DURATION_INEQUALITIES
	CONTINUOUS_EFFECTS
	DERIVED_PREDICATES
	TIMED_INITIAL_LITERALS
	PREFERENCES
	CONSTRAINTS
	ACTION_COSTS
	TEMPORALLY_EXTENDED
	TYPES
	CONSTANTS
	PREDICATES
	FUNCTIONS
	NUMBER
	OBJECT
	EITHER
	ACTION
	PARAMETERS
	PRECONDITION
	EFFECT
	AND
	FORALL
	PREFERENCE
	OR
	NOT
	IMPLY
	EXISTS
	WHEN
	ASSIGN
	UNDEFINED
	SCALE_UP
	SCALE_DOWN
	INCREASE
	DECREASE
	DURATIVE_ACTION
	DURATION
	CONDITION
	AT
	OVER
	SOMEWHERE
	ANYWHERE
	TRANSITION_OVER
	MINUS
	START
	END
	ALL
	Q_M_DURATION
	Q_M
	DERIVED
	PROBLEM
	DD_DOMAIN
	OBJECTS
	INIT
	GOAL
	ALWAYS
	SOMETIME
	WITHIN
	AT_MOST_ONCE
	SOMETIME_AFTER
	SOMETIME_BEFORE
	ALWAYS_WITHIN
	HOLD_DURING
	HOLD_AFTER
	METRIC
	MINIMIZE
	MAXIMIZE
	TOTAL_TIME
	IS_VIOLATED
	LENGTH
	SERIAL
	PARALLEL
	TIMEPOINTS
	TIMEALIASES
	TIMEMODALITY
	TIMECONSTRAINTS
	NAME

%%

begin:
	domain {}
	| problem {}
	;


/***************************************************/
/************** Domain Description *****************/
/***************************************************/		


/* <domain> */

domain:
	L_P DEFINE L_P DOMAIN name R_P domain_option1 {
		Parser::add_Domain(*($5.name));
	}
	;

domain_option1:
	domain_option2
	| require_def domain_option2
	;

domain_option2:
	domain_option3
	| types_def domain_option3 {
		if (!Parser::is_Requirement(TYPING)) Parser::lexical_error("Requirement :typing is needed");
	}
	;

domain_option3:
	domain_option4
	| constants_def domain_option4
	;

domain_option4:
	domain_option5
	| predicates_def domain_option5
	;

domain_option5:
	domain_option6
	| functions_def domain_option6 {
		if (!Parser::is_Requirement(FLUENTS)) Parser::lexical_error("Requirement :fluents is needed");
	}
	;

domain_option6:
	domain_option7
	| constraints_domain domain_option7
	;

domain_option7:
	list_structure_def R_P
	;

/* <name> */

name:
	NAME {$$.name = new std::string(d_scanner.matched());}
	| AT {$$.name = new std::string("at");}
	| OVER {$$.name = new std::string("over");}
	| OBJECT {$$.name = new std::string("object");}
	;

/* <require-def> */

require_def:
	L_P REQUIREMENTS nvList_require_key R_P
	;

/* <require-key> */

require_key:
	STRIPS						{Parser::add_Requirement(STRIPS);}
	| TYPING					{Parser::add_Requirement(TYPING);}
	| NEGATIVE_PRECONDITIONS	{Parser::add_Requirement(NEGATIVE_PRECONDITIONS);}
	| DISJUNCTIVE_PRECONDITIONS	{Parser::add_Requirement(DISJUNCTIVE_PRECONDITIONS);}
	| EQUALITY					{Parser::add_Requirement(EQUALITY);}
	| EXISTENTIAL_PRECONDITIONS	{Parser::add_Requirement(EXISTENTIAL_PRECONDITIONS);}
	| UNIVERSAL_PRECONDITIONS	{Parser::add_Requirement(UNIVERSAL_PRECONDITIONS);}
	| QUANTIFIED_PRECONDITIONS	{
		Parser::add_Requirement(QUANTIFIED_PRECONDITIONS);
		Parser::add_Requirement(EXISTENTIAL_PRECONDITIONS);
		Parser::add_Requirement(UNIVERSAL_PRECONDITIONS);
	}
	| CONDITIONAL_EFFECTS		{Parser::add_Requirement(CONDITIONAL_EFFECTS);}
	| FLUENTS					{
		Parser::add_Requirement(FLUENTS);
		Parser::add_Requirement(NUMERIC_FLUENTS);
		Parser::add_Requirement(OBJECT_FLUENTS);
	}
	| NUMERIC_FLUENTS			{Parser::add_Requirement(NUMERIC_FLUENTS);}
	| OBJECT_FLUENTS			{Parser::add_Requirement(OBJECT_FLUENTS);}
	| ADL						{
		Parser::add_Requirement(STRIPS);
		Parser::add_Requirement(TYPING);
		Parser::add_Requirement(NEGATIVE_PRECONDITIONS);
		Parser::add_Requirement(DISJUNCTIVE_PRECONDITIONS);
		Parser::add_Requirement(EQUALITY);
		Parser::add_Requirement(QUANTIFIED_PRECONDITIONS);
		Parser::add_Requirement(CONDITIONAL_EFFECTS);
	}
	| DURATIVE_ACTIONS			{
		Parser::add_Requirement(DURATIVE_ACTIONS);
		Parser::add_Requirement(NUMERIC_FLUENTS);
	}
	| DURATION_INEQUALITIES		{Parser::add_Requirement(DURATION_INEQUALITIES);}
	| CONTINUOUS_EFFECTS		{Parser::add_Requirement(CONTINUOUS_EFFECTS);}
	| DERIVED_PREDICATES		{Parser::add_Requirement(DERIVED_PREDICATES);}
	| TIMED_INITIAL_LITERALS	{
		Parser::add_Requirement(TIMED_INITIAL_LITERALS);
		Parser::add_Requirement(DURATIVE_ACTIONS);
	}
	| PREFERENCES				{Parser::add_Requirement(PREFERENCES);}
	| CONSTRAINTS				{Parser::add_Requirement(CONSTRAINTS);}
	| ACTION_COSTS				{Parser::add_Requirement(ACTION_COSTS);}
	| TEMPORALLY_EXTENDED		{
		Parser::add_Requirement(TEMPORALLY_EXTENDED);
		Parser::add_Requirement(DURATIVE_ACTIONS);
	}
	;

/* <types-def> */
types_def:
	L_P TYPES typed_list_name R_P
	;

/* <contants-def> */

constants_def:
	L_P CONSTANTS typed_list_name R_P {
		if (!Parser::add_Constants($3.named_list))
			Parser::lexical_error("A constant must have only one type");
	}
	;

/* <predicates-def> */

predicates_def:
	L_P PREDICATES nvList_atomic_formula_skeleton R_P
	;

/* <atomic formula skeleton> */

atomic_formula_skeleton:
	L_P predicate typed_list_variable R_P {
		if (!Parser::add_Predicate($2.name, $3.named_list)) {
			Parser::lexical_error("Multiple definition of predicate " + *$2.name);
		}
	}
	;

/* <predicate> */

predicate:
	name {$$.name = $1.name;}
	;

/* <variable> */

variable:
	Q_M name {$$.name = $2.name;}
	;

/* <atomic function skeleton> */

atomic_function_skeleton:
	L_P function_symbol typed_list_variable R_P
	;

/* <function-symbol> */

function_symbol:
	name
	;

/* <functions-def> */

functions_def:
	L_P FUNCTIONS function_typed_list_atomic_function_skeleton R_P {
		if (!Parser::is_Requirement(FLUENTS)) Parser::lexical_error("Requirement :fluents is needed");
	}
	;

/* <function type> */

function_type:
	NUMBER {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	| type {
		if (!Parser::is_Requirement(TYPING)) Parser::lexical_error("Requirement :typing is needed");
		if (!Parser::is_Requirement(OBJECT_FLUENTS)) Parser::lexical_error("Requirement :object-fluents is needed");
	}
	;

/* <constraints> */

constraints_domain:
	L_P CONSTRAINTS con_GD R_P {
		if (!Parser::is_Requirement(CONSTRAINTS)) Parser::lexical_error("Requirement :constraints is needed");
	}
	;

/* <structure-def> */

structure_def:
	action_def
	| durative_action_def {
		if (!Parser::is_Requirement(DURATIVE_ACTIONS)) Parser::lexical_error("Requirement :durative-actions is needed");
	}
	| te_durative_action_def {
		if (!Parser::is_Requirement(TEMPORALLY_EXTENDED)) Parser::lexical_error("Requirement :temporally-extended is needed");
	}
	| derived_def {
		if (!Parser::is_Requirement(DERIVED_PREDICATES)) Parser::lexical_error("Requirement :derived-predicates is needed");
	}
	;

/* <primitive-type> */

primitive_type:
	name {$$.name = new std::string(d_scanner.matched());}
	| OBJECT {$$.name = new std::string("object");}
	;

/* <type> */

type:
	primitive_type {$$.name = $1.name;}
	| L_P EITHER nvList_primitive_type R_P
	;

/* <action_def> */

action_def:
	L_P ACTION action_symbol PARAMETERS L_P typed_list_variable R_P action_def_body R_P
	;

/* <action_symbol> */

action_symbol:
	name
	;

/* <action-def body> */

action_def_body:
	action_def_body_option1
	;

action_def_body_option1:
	action_def_body_option2
	| PRECONDITION emptyOr_pre_GD action_def_body_option2
	;

action_def_body_option2:
	/* empty */
	| EFFECT emptyOr_effect
	;

/* <pre-GD> */

pre_GD:
	pref_GD
	| L_P AND list_pre_GD R_P
	| L_P FORALL L_P typed_list_variable R_P pre_GD R_P {
		if (!Parser::is_Requirement(UNIVERSAL_PRECONDITIONS)) Parser::lexical_error("Requirement :universal-preconditions is needed");
	}
	;

/* <pref-GD> */

pref_GD:
	GD
	| L_P PREFERENCE pref_GD_option1 {
		if (!Parser::is_Requirement(PREFERENCES)) Parser::lexical_error("Requirement :preferences is needed");
	}
	;

pref_GD_option1:
	GD R_P
	| pref_name GD R_P
	;

/* <pref-name> */

pref_name:
	name
	;

/* <GD> */

GD:
	atomic_formula_term
	| literal_term {
		if (!Parser::is_Requirement(NEGATIVE_PRECONDITIONS)) Parser::lexical_error("Requirement :negative-preconditions is needed");
	}
	| L_P AND list_GD R_P
	| L_P OR list_GD R_P {
		if (!Parser::is_Requirement(DISJUNCTIVE_PRECONDITIONS)) Parser::lexical_error("Requirement :disjunctive-preconditions is needed");
	}
	| L_P NOT GD R_P {
		if (!Parser::is_Requirement(DISJUNCTIVE_PRECONDITIONS)) Parser::lexical_error("Requirement :disjunctive-preconditions is needed");
	}
	| L_P IMPLY GD GD R_P {
		if (!Parser::is_Requirement(DISJUNCTIVE_PRECONDITIONS)) Parser::lexical_error("Requirement :disjunctive-preconditions is needed");
	}
	| L_P EXISTS L_P L_P typed_list_variable R_P R_P GD R_P {
		if (!Parser::is_Requirement(EXISTENTIAL_PRECONDITIONS)) Parser::lexical_error("Requirement :existential-preconditions is needed");
	}
	| L_P FORALL L_P L_P typed_list_variable R_P R_P GD R_P {
		if (!Parser::is_Requirement(UNIVERSAL_PRECONDITIONS)) Parser::lexical_error("Requirement :universal-preconditions is needed");
	}
	| f_comp {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	;

/* <f-comp> */

f_comp:
	L_P binary_comp f_exp f_exp R_P
	;

/* <term> */

term:
	name
	| variable
	| function_term {
		if (!Parser::is_Requirement(OBJECT_FLUENTS)) Parser::lexical_error("Requirement :object-fluents is needed");
	}
	;

/* <function-term> */

function_term:
	L_P function_symbol list_term R_P {
		if (!Parser::is_Requirement(OBJECT_FLUENTS)) Parser::lexical_error("Requirement :object-fluents is needed");
	}
	;

/* <f-exp> */

f_exp:
	number {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	| L_P binary_op f_exp f_exp R_P {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	| L_P multi_op f_exp nvList_f_exp R_P {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	| L_P MINUS f_exp R_P {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	| f_head {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	;

/* <number> */

number:
	NUM
	;

/* <f-head> */

f_head:
	L_P function_symbol list_term R_P
	| function_symbol
	;

/* <binary-op> */

binary_op:
	multi_op
	| MINUS
	| SLASH
	;

/* <multi-op> */

multi_op:
	STAR
	| PLUS
	;

/* <binary-comp> */

binary_comp:
	GT
	| LT
	| EQ
	| GOE
	| LOE
	;

/* <effect> */

effect:
	L_P AND list_c_effect R_P
	| c_effect
	;

/* <c-effect> */

c_effect:
	L_P FORALL L_P typed_list_variable R_P effect R_P {
		if (!Parser::is_Requirement(CONDITIONAL_EFFECTS)) Parser::lexical_error("Requirement :conditional-effects is needed");
	}
	| L_P WHEN GD cond_effect R_P {
		if (!Parser::is_Requirement(CONDITIONAL_EFFECTS)) Parser::lexical_error("Requirement :conditional-effects is needed");
	}
	| p_effect
	;

/* <p-effect> */

p_effect:
	L_P NOT atomic_formula_term R_P
	| atomic_formula_term
	| L_P assign_op f_head f_exp {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	| L_P ASSIGN function_term term R_P {
		if (!Parser::is_Requirement(OBJECT_FLUENTS)) Parser::lexical_error("Requirement :object-fluents is needed");
	}
	| L_P ASSIGN function_term UNDEFINED R_P {
		if (!Parser::is_Requirement(OBJECT_FLUENTS)) Parser::lexical_error("Requirement :object-fluents is needed");
	}
	;

/* <cond-effect> */

cond_effect:
	L_P AND list_p_effect R_P
	| p_effect
	;

/* <assign-op> */

assign_op:
	ASSIGN
	| SCALE_UP
	| SCALE_DOWN
	| INCREASE
	| DECREASE
	;

/* <durative-action-def> */

durative_action_def:
	L_P DURATIVE_ACTION da_symbol PARAMETERS L_P typed_list_variable R_P da_def_body R_P
	;

/* <da-symbol> */

da_symbol:
	name
	;

/* <da-def body> */

da_def_body:
	DURATION duration_constraint CONDITION emptyOr_da_GD EFFECT emptyOr_da_effect
	;

/* <da-GD> */

da_GD:
	pref_timed_GD
	| L_P AND list_da_GD R_P
	| L_P FORALL L_P typed_list_variable R_P da_GD R_P {
		if (!Parser::is_Requirement(UNIVERSAL_PRECONDITIONS)) Parser::lexical_error("Requirement :universal-preconditions is needed");
	}
	;

/* <pref-timed-GD> */

pref_timed_GD:
	timed_GD
	| L_P PREFERENCE pref_name_option1 {
		if (!Parser::is_Requirement(PREFERENCES)) Parser::lexical_error("Requirement :preferences is needed");
	}
	;

pref_name_option1:
	timed_GD R_P
	| pref_name timed_GD R_P
	;

/* <timed-GD> */

timed_GD:
	L_P AT time_specifier GD R_P
	| L_P OVER interval GD R_P
	;

/* <time-specifier> */

time_specifier:
	START
	| END
	;

/* <interval> */

interval:
	ALL
	;

/* <duration-constraint> */

duration_constraint:
	L_P AND nvList_simple_duration_constraint R_P {
		if (!Parser::is_Requirement(DURATION_INEQUALITIES)) Parser::lexical_error("Requirement :duration-inequalities is needed");
	}
	| L_P R_P
	| simple_duration_constraint
	;

/* <simple-duration-constraint> */

simple_duration_constraint:
	L_P d_op Q_M_DURATION d_value R_P
	| L_P AT time_specifier simple_duration_constraint R_P
	;

/* <d-op> */

d_op:
	LOE {
		if (!Parser::is_Requirement(DURATION_INEQUALITIES)) Parser::lexical_error("Requirement :duration-inequalities is needed");
	}
	| GOE {
		if (!Parser::is_Requirement(DURATION_INEQUALITIES)) Parser::lexical_error("Requirement :duration-inequalities is needed");
	}
	| EQ
	;

/* <d-value> */

d_value:
	NUMBER
	| f_exp {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	;

/* <da-effect> */

da_effect:
	L_P AND list_da_effect R_P
	| timed_effect
	| L_P FORALL L_P typed_list_variable R_P da_effect R_P {
		if (!Parser::is_Requirement(CONDITIONAL_EFFECTS)) Parser::lexical_error("Requirement :conditional-effects is needed");
	}
	| L_P WHEN da_GD timed_effect R_P {
		if (!Parser::is_Requirement(CONDITIONAL_EFFECTS)) Parser::lexical_error("Requirement :conditional-effects is needed");
	}
	;

/* <timed-effect> */

timed_effect:
	L_P AT time_specifier cond_effect R_P
	| L_P AT time_specifier f_assign_da R_P {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	| L_P assign_op_t f_head f_exp_t R_P {
		if (!Parser::is_Requirement(CONTINUOUS_EFFECTS)) Parser::lexical_error("Requirement :continuous-effects is needed");
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	;

/* <f-assign-da> */

f_assign_da:
	L_P assign_op f_head f_exp_da R_P
	;

/* <f-exp-da> */

f_exp_da:
	L_P binary_op f_exp_da f_exp_da R_P
	| L_P multi_op f_exp_da nvList_f_exp_da R_P
	| L_P MINUS f_exp_da R_P
	| Q_M_DURATION  {
		if (!Parser::is_Requirement(DURATION_INEQUALITIES)) Parser::lexical_error("Requirement :duration-inequalities is needed");
	}
	| f_exp
	;

/* <assign-op-t> */

assign_op_t:
	INCREASE
	| DECREASE
	;

/* <f-exp-t> */

f_exp_t:
	L_P STAR f_exp NS_T R_P
	| L_P STAR NS_T f_exp R_P
	| NS_T
	;

/* <derived-def> */

derived_def:
	L_P DERIVED atomic_formula_skeleton GD R_P
	;


/***************************************************/
/************** Problem Description ****************/
/***************************************************/


/* <problem> */

problem:
	L_P DEFINE L_P PROBLEM name R_P L_P DD_DOMAIN name R_P problem_option1
	;

problem_option1:
	problem_option2
	| require_def problem_option2
	;

problem_option2:
	problem_option3
	| object_declaration problem_option3
	;

problem_option3:
	init goal problem_option4
	| init goal constraints_problem problem_option4 {
		if (!Parser::is_Requirement(CONSTRAINTS)) Parser::lexical_error("Requirement :constraints is needed");
	}
	;

problem_option4:
	problem_option5
	| metric_spec problem_option5 {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	;

problem_option5:
	R_P
	| length_spec R_P
	;

/* <object declaration> */

object_declaration:
	L_P OBJECTS typed_list_name R_P
	;

/* <init> */

init:
	L_P INIT list_init_el R_P
	;

/* <init-el> */

init_el:
	literal_name
	| L_P AT number literal_name R_P {
		if (!Parser::is_Requirement(TIMED_INITIAL_LITERALS)) Parser::lexical_error("Requirement :timed-initial-literals is needed");
	}
	| L_P EQ basic_function_term number R_P {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	| L_P EQ basic_function_term name R_P {
		if (!Parser::is_Requirement(OBJECT_FLUENTS)) Parser::lexical_error("Requirement :object-fluents is needed");
	}
	;

/* <basic-function-term> */

basic_function_term:
	function_symbol
	| L_P function_symbol list_name R_P
	;

/* <goal> */

goal:
	L_P GOAL pre_GD R_P
	;

/* <contraints> */

constraints_problem:
	L_P CONSTRAINTS pref_con_GD R_P {
		if (!Parser::is_Requirement(CONSTRAINTS)) Parser::lexical_error("Requirement :constraints is needed");
	}
	;

/* <pref-con-GD> */

pref_con_GD:
	L_P AND list_pref_con_GD R_P
	| L_P FORALL L_P typed_list_variable R_P pref_con_GD R_P {
		if (!Parser::is_Requirement(UNIVERSAL_PRECONDITIONS)) Parser::lexical_error("Requirement :universal-preconditions is needed");
	}
	| L_P PREFERENCE pref_con_GD_option1 {
		if (!Parser::is_Requirement(PREFERENCES)) Parser::lexical_error("Requirement :preferences is needed");
	}
	| con_GD
	;

pref_con_GD_option1:
	con_GD R_P
	| pref_name con_GD R_P
	;

/* <con-GD> */

con_GD:
	L_P AND list_con_GD R_P
	| L_P FORALL L_P typed_list_variable R_P con_GD R_P
	| L_P AT END GD R_P
	| L_P ALWAYS con2_GD R_P
	| L_P SOMETIME con2_GD R_P
	| L_P WITHIN number con2_GD R_P
	| L_P AT_MOST_ONCE con2_GD con2_GD R_P
	| L_P SOMETIME_AFTER con2_GD con2_GD R_P
	| L_P SOMETIME_BEFORE con2_GD con2_GD R_P
	| L_P ALWAYS_WITHIN number con2_GD con2_GD R_P
	| L_P HOLD_DURING number number con2_GD R_P
	| L_P HOLD_AFTER number con2_GD R_P
	;

/* <con2-GD> */

con2_GD:
	con_GD
	| GD
	;

/* <metric-spec> */

metric_spec:
	L_P METRIC optimization metric_f_exp R_P {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	;

/* <optimization> */

optimization:
	MINIMIZE
	| MAXIMIZE
	;

/* <metric-f-exp> */

metric_f_exp:
	L_P binary_op metric_f_exp metric_f_exp R_P
	| L_P multi_op metric_f_exp nvList_metric_f_exp R_P
	| L_P MINUS metric_f_exp R_P
	| number
	| L_P function_symbol list_name R_P
	| function_symbol
	| TOTAL_TIME
	| L_P TOTAL_TIME R_P
	| L_P IS_VIOLATED pref_name R_P {
		if (!Parser::is_Requirement(PREFERENCES)) Parser::lexical_error("Requirement :preferences is needed");
	}
	;

/* <length-spec> */

length_spec:
	L_P LENGTH length_spec_option1
	;

length_spec_option1:
	length_spec_option2
	| L_P SERIAL integer R_P length_spec_option2
	;

length_spec_option2:
	R_P
	| L_P PARALLEL integer R_P R_P
	;

/* <integer> */

integer:
	NUM
	;


/***************************************************/
/*************** Temporally_Extended ***************/
/***************************************************/


/* <te-durative-action-def> */

te_durative_action_def:
	L_P DURATIVE_ACTION da_symbol PARAMETERS L_P typed_list_variable R_P te_da_def_body R_P
	;

/* <te-da-def body> */

te_da_def_body:
	DURATION duration_constraint TIMEPOINTS L_P nvList_te_time_specifier R_P TIMEALIASES L_P nvList_te_interval_alias R_P te_da_def_body_option1 // :timepoints must contain at least "start" and "end" ### :timealiases must contain at least "all" interval from "start" to "end" ### :timeconstraints must contain at least "(= (- end start) ?duration"
	;

te_da_def_body_option1:
	TIMECONSTRAINTS L_P nvList_te_time_constraints R_P CONDITION emptyOr_te_da_GD EFFECT emptyOr_te_da_effect
	| TIMEMODALITY nvList_te_time_modality_user TIMECONSTRAINTS L_P nvList_te_time_constraints R_P CONDITION emptyOr_te_da_GD EFFECT emptyOr_te_da_effect
	;

/* <te-time-specifier> */

te_time_specifier:
	time_specifier
	| f_exp_da
	| name // allows to define flypoints
	| L_P binary_op te_time_specifier te_time_specifier R_P // allows to compare flypoints with binary operations
	;

/* <te-interval-alias> */

te_interval_alias:
	te_interval te_interval
	;

/* <te-interval> */

te_interval:
	interval
	| name
	| bracket te_time_specifier te_time_specifier bracket
	;

/* <te-time-constraints> */

te_time_constraints:
	L_P binary_comp te_time_specifier te_time_specifier R_P
	;

/* <te-da-GD> */

te_da_GD:
	te_pref_timed_GD
	| L_P AND list_te_da_GD R_P
	| L_P FORALL L_P typed_list_variable R_P te_da_GD R_P {
		if (!Parser::is_Requirement(UNIVERSAL_PRECONDITIONS)) Parser::lexical_error("Requirement :universal-preconditions is needed");
	}
	;

/* <te-pref-timed-GD> */

te_pref_timed_GD:
	te_timed_GD
	| L_P PREFERENCE te_pref_timed_GD_option1 {
		if (!Parser::is_Requirement(PREFERENCES)) Parser::lexical_error("Requirement :preferences is needed");
	}
	;

te_pref_timed_GD_option1:
	te_timed_GD R_P
	| pref_name te_timed_GD R_P
	;

/* <te-timed-GD> */

te_timed_GD:
	L_P AT te_time_specifier GD R_P
	| L_P OVER te_interval GD R_P
	| L_P SOMEWHERE te_interval GD R_P
	| L_P ANYWHERE te_interval GD R_P
	| L_P TRANSITION_OVER te_interval GD R_P
	| L_P name te_interval GD R_P // user modality
	;

/* <te-da-effect> */

te_da_effect:
	L_P AND list_te_da_effect R_P
	| te_timed_effect
	| te_modality
	| L_P FORALL L_P typed_list_variable R_P te_da_effect R_P {
		if (!Parser::is_Requirement(CONDITIONAL_EFFECTS)) Parser::lexical_error("Requirement :conditional-effects is needed");
	}
	| L_P WHEN da_GD te_timed_effect R_P {
		if (!Parser::is_Requirement(CONDITIONAL_EFFECTS)) Parser::lexical_error("Requirement :conditional-effects is needed");
	}
	;

/* <te-timed-effect> */

te_timed_effect:
	L_P AT te_time_specifier cond_effect R_P
	| L_P AT te_time_specifier f_assign_da R_P {if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");}
	| L_P assign_op_t f_head f_exp_t R_P  {
		if (!Parser::is_Requirement(CONTINUOUS_EFFECTS)) Parser::lexical_error("Requirement :continuous-effects is needed");
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	;

/* <time-modality> */

te_modality:
	L_P AT te_time_specifier te_fluent R_P
	| L_P OVER te_interval te_fluent R_P
	| L_P SOMEWHERE te_interval te_fluent R_P
	| L_P ANYWHERE te_interval te_fluent R_P
	| L_P TRANSITION_OVER te_interval te_fluent R_P
	| L_P name te_interval te_fluent R_P // user modality
	;

/* <te-fluent> */

te_fluent:
	atomic_formula_skeleton
	| L_P NOT atomic_formula_skeleton R_P
	;

/* <te-time-modality-user> */

te_time_modality_user:
	L_P name interval te_fluent R_P
	;

/* <bracket> */

bracket:
	L_B
	| R_B
	;


/***************************************************/
/****************** Miscellaneous ******************/
/***************************************************/


/* <function typed list (x)> */

function_typed_list_atomic_function_skeleton:
	/* empty */
	| nvList_atomic_function_skeleton MINUS function_type function_typed_list_atomic_function_skeleton
	| nvList_atomic_function_skeleton {
		if (!Parser::is_Requirement(NUMERIC_FLUENTS)) Parser::lexical_error("Requirement :numeric-fluents is needed");
	}
	;


/* <typed list (x)> */

typed_list_name:
	list_name {
		$$.named_list = new std::vector<NamedList *> ();
		if ($1.list_name->size() == 0) {
			// if end of named_list
		} else {
			// if no type
			$$.named_list->push_back( new NamedList(new std::string("object"), $1.list_name ));
		}
	}
	| nvList_name MINUS type typed_list_name {
		if (!Parser::is_Requirement(TYPING)) Parser::lexical_error("Requirement :typing is needed");
		$4.named_list->push_back( new NamedList($3.name, $1.list_name) );
		$$.named_list = $4.named_list;
	}
	;

typed_list_variable:
	list_variable {
		$$.named_list = new std::vector<NamedList *> ();
		if ($1.list_name->size() == 0) {
			// if end of named_list
		} else {
			// if no type
			$$.named_list->push_back( new NamedList(new std::string("object"), $1.list_name ));
		}
	}
	| nvList_variable MINUS type typed_list_variable {
		if (!Parser::is_Requirement(TYPING)) Parser::lexical_error("Requirement :typing is needed");
		$4.named_list->push_back( new NamedList($3.name, $1.list_name) );
		$$.named_list = $4.named_list;
	}
	;

/* <emptyOr (x)> */

emptyOr_pre_GD:
	L_P R_P
	| pre_GD
	;

emptyOr_effect:
	L_P R_P
	| effect
	;

emptyOr_da_GD:
	L_P R_P
	| da_GD
	;

emptyOr_da_effect:
	L_P R_P
	| da_effect
	;

emptyOr_te_da_GD:
	L_P R_P
	| te_da_GD
	;

emptyOr_te_da_effect:
	L_P R_P
	| te_da_effect
	;

/* <litteral (t)> */

literal_term:
	atomic_formula_term
	| L_P NOT atomic_formula_term R_P
	;

literal_name:
	atomic_formula_name
	| L_P NOT atomic_formula_name R_P
	;

/* <atomic formula (t)> */

atomic_formula_term:
	L_P predicate list_term R_P
	| L_P EQ term term R_P {
		if (!Parser::is_Requirement(EQUALITY)) Parser::lexical_error("Requirement :equality is needed");
	}
	;

atomic_formula_name:
	L_P predicate list_name R_P
	| L_P EQ name name R_P {
		if (!Parser::is_Requirement(EQUALITY)) Parser::lexical_error("Requirement :equality is needed");
	}
	;

/* nvList_A (for non void list) -> A+ */

nvList_require_key:
	require_key list_require_key
	;

nvList_name:
	name list_name {
		$2.list_name->push_back($1.name);
		$$.list_name = $2.list_name;
	}
	;

nvList_atomic_formula_skeleton:
	atomic_formula_skeleton list_atomic_formula_skeleton
	;

nvList_variable:
	variable list_variable {
		$2.list_name->push_back($1.name);
		$$.list_name = $2.list_name;
	}
	;
	
nvList_atomic_function_skeleton:
	atomic_function_skeleton list_atomic_function_skeleton
	;

nvList_primitive_type:
	primitive_type list_primitive_type
	;

nvList_f_exp:
	f_exp list_f_exp
	;

nvList_te_time_specifier:
	te_time_specifier list_te_time_specifier
	;

nvList_te_interval_alias:
	te_interval_alias list_te_interval_alias
	;

nvList_te_time_modality_user:
	te_time_modality_user list_te_time_modality_user
	;

nvList_te_time_constraints:
	te_time_constraints list_te_time_constraints
	;

nvList_simple_duration_constraint:
	simple_duration_constraint list_simple_duration_constraint
	;

nvList_f_exp_da:
	f_exp_da list_f_exp_da
	;

nvList_metric_f_exp:
	metric_f_exp list_metric_f_exp
	;

/* list_A -> A* */

list_structure_def:
	/* empty */
	| structure_def list_structure_def
	;

list_require_key:
	/* empty */
	| require_key list_require_key
	;

list_name:
	/* empty */ {
		$$.list_name = new std::vector<std::string *> ();
	}
	| name list_name {
		$2.list_name->push_back($1.name);
		$$.list_name = $2.list_name;
	}
	;

list_atomic_formula_skeleton:
	/* empty */		
	| atomic_formula_skeleton list_atomic_formula_skeleton
	;

list_variable:
	/* empty */ {
		$$.list_name = new std::vector<std::string *> ();
	}
	| variable list_variable {
		$2.list_name->push_back($1.name);
		$$.list_name = $2.list_name;
	}
	;

list_atomic_function_skeleton:
	/* empty */
	| atomic_function_skeleton list_atomic_function_skeleton
	;

list_primitive_type:
	/* empty */
	| primitive_type list_primitive_type
	;

list_pre_GD:
	/* empty */
	| pre_GD list_pre_GD
	;

list_term:
	/* empty */
	| term list_term
	;

list_GD:
	/* empty */
	| GD list_GD
	;

list_f_exp:
	/* empty */
	| f_exp list_f_exp
	;

list_c_effect:
	/* empty */
	| c_effect list_c_effect
	;

list_p_effect:
	/* empty */
	| p_effect list_p_effect
	;

list_te_time_specifier:
	/* empty */
	| te_time_specifier list_te_time_specifier
	;

list_te_interval_alias:
	/* empty */
	| te_interval_alias list_te_interval_alias
	;

list_te_time_modality_user:
	/* empty */
	| te_time_modality_user list_te_time_modality_user
	;

list_te_time_constraints:
	/* empty */
	| te_time_constraints list_te_time_constraints
	;

list_te_da_GD:
	/* empty */
	| te_da_GD list_te_da_GD
	;

list_te_da_effect:
	/* empty */
	| te_da_effect list_te_da_effect
	;

list_da_GD:
	/* empty */
	| da_GD list_da_GD
	;

list_simple_duration_constraint:
	/* empty */
	| simple_duration_constraint list_simple_duration_constraint
	;

list_da_effect:
	/* empty */
	| da_effect list_da_effect
	;

list_f_exp_da:
	/* empty */
	| f_exp_da list_f_exp_da
	;

list_init_el:
	/* empty */
	| init_el list_init_el
	;

list_pref_con_GD:
	/* empty */
	| pref_con_GD list_pref_con_GD
	;

list_con_GD:
	/* empty */
	| con_GD list_con_GD
	;

list_metric_f_exp:
	/* empty */
	| metric_f_exp list_metric_f_exp
	;


/***************************************************/
/*********************** End ***********************/
/***************************************************/

