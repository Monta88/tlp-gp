// Generated by Bisonc++ V4.08.00 on Wed, 02 Apr 2014 01:23:05 +0200

#ifndef ParserBase_h_included
#define ParserBase_h_included

#include <exception>
#include <vector>
#include <iostream>

// $insert preincludes
#include "../headers.h"

namespace // anonymous
{
    struct PI__;
}



class ParserBase
{
    public:
// $insert tokens

    // Symbolic tokens:
    enum Tokens__
    {
        L_P = 257,
        R_P,
        L_B,
        R_B,
        NS_T,
        EQ,
        SLASH,
        STAR,
        PLUS,
        GT,
        LT,
        GOE,
        LOE,
        NUM,
        DEFINE,
        DOMAIN,
        REQUIREMENTS,
        STRIPS,
        TYPING,
        NEGATIVE_PRECONDITIONS,
        DISJUNCTIVE_PRECONDITIONS,
        EQUALITY,
        EXISTENTIAL_PRECONDITIONS,
        UNIVERSAL_PRECONDITIONS,
        QUANTIFIED_PRECONDITIONS,
        CONDITIONAL_EFFECTS,
        FLUENTS,
        NUMERIC_FLUENTS,
        OBJECT_FLUENTS,
        ADL,
        DURATIVE_ACTIONS,
        DURATION_INEQUALITIES,
        CONTINUOUS_EFFECTS,
        DERIVED_PREDICATES,
        TIMED_INITIAL_LITERALS,
        PREFERENCES,
        CONSTRAINTS,
        ACTION_COSTS,
        TEMPORALLY_EXTENDED,
        TYPES,
        CONSTANTS,
        PREDICATES,
        FUNCTIONS,
        NUMBER,
        OBJECT,
        EITHER,
        ACTION,
        PARAMETERS,
        PRECONDITION,
        EFFECT,
        AND,
        FORALL,
        PREFERENCE,
        OR,
        NOT,
        IMPLY,
        EXISTS,
        WHEN,
        ASSIGN,
        UNDEFINED,
        SCALE_UP,
        SCALE_DOWN,
        INCREASE,
        DECREASE,
        DURATIVE_ACTION,
        DURATION,
        CONDITION,
        AT,
        OVER,
        SOMEWHERE,
        ANYWHERE,
        TRANSITION_OVER,
        MINUS,
        START,
        END,
        ALL,
        Q_M_DURATION,
        Q_M,
        DERIVED,
        PROBLEM,
        DD_DOMAIN,
        OBJECTS,
        INIT,
        GOAL,
        ALWAYS,
        SOMETIME,
        WITHIN,
        AT_MOST_ONCE,
        SOMETIME_AFTER,
        SOMETIME_BEFORE,
        ALWAYS_WITHIN,
        HOLD_DURING,
        HOLD_AFTER,
        METRIC,
        MINIMIZE,
        MAXIMIZE,
        TOTAL_TIME,
        IS_VIOLATED,
        LENGTH,
        SERIAL,
        PARALLEL,
        TIMEPOINTS,
        TIMEALIASES,
        TIMECONSTRAINTS,
        NAME,
    };

// $insert STYPE
union STYPE__
{
 std::string * name;
 std::vector<std::string> * list_name;
 std::vector<TypedList*> * typedList_list;
 std::pair< std::string*, std::vector<TypedList*>* > * function_skeleton;
 std::vector< std::pair< std::string*, std::vector<TypedList*>* >* > * function_skeleton_list;
 
 
 float durative; 
 std::vector< std::pair< std::pair< std::vector< std::string > *, std::string *> ,int* > > *nearly_conds;
 std::vector< std::pair< std::pair< std::vector< std::string > *, std::string *> ,int* > > *nearly_effects;
 int specifier_time;
};


    private:
        int d_stackIdx__;
        std::vector<size_t>   d_stateStack__;
        std::vector<STYPE__>  d_valueStack__;

    protected:
        enum Return__
        {
            PARSE_ACCEPT__ = 0,   // values used as parse()'s return values
            PARSE_ABORT__  = 1
        };
        enum ErrorRecovery__
        {
            DEFAULT_RECOVERY_MODE__,
            UNEXPECTED_TOKEN__,
        };
        bool        d_debug__;
        size_t      d_nErrors__;
        size_t      d_requiredTokens__;
        size_t      d_acceptedTokens__;
        int         d_token__;
        int         d_nextToken__;
        size_t      d_state__;
        STYPE__    *d_vsp__;
        STYPE__     d_val__;
        STYPE__     d_nextVal__;

        ParserBase();

        void ABORT() const;
        void ACCEPT() const;
        void ERROR() const;
        void clearin();
        bool debug() const;
        void pop__(size_t count = 1);
        void push__(size_t nextState);
        void popToken__();
        void pushToken__(int token);
        void reduce__(PI__ const &productionInfo);
        void errorVerbose__();
        size_t top__() const;

    public:
        void setDebug(bool mode);
}; 

inline bool ParserBase::debug() const
{
    return d_debug__;
}

inline void ParserBase::setDebug(bool mode)
{
    d_debug__ = mode;
}

inline void ParserBase::ABORT() const
{
    throw PARSE_ABORT__;
}

inline void ParserBase::ACCEPT() const
{
    throw PARSE_ACCEPT__;
}

inline void ParserBase::ERROR() const
{
    throw UNEXPECTED_TOKEN__;
}


// As a convenience, when including ParserBase.h its symbols are available as
// symbols in the class Parser, too.
#define Parser ParserBase


#endif


