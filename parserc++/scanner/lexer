/* Parser PDDL */
/* pddl_3-1.lex */
/* Authors : BENIER Alan, PRAT Nathan, LAGLEIZE Martin */
/* The display is better with 4 spaces tabulations */

%%

"("												return Parser::L_P;
")"												return Parser::R_P;
"["												return Parser::L_B;
"]"												return Parser::R_B;
"#t"											return Parser::NS_T;
"="												return Parser::EQ;
"/"												return Parser::SLASH;
"*"												return Parser::STAR;
"+"												return Parser::PLUS;
">"												return Parser::GT;
"<"												return Parser::LT;
">="											return Parser::GOE;
"<="											return Parser::LOE;
([0-9]+[.][0-9]*)|([0-9]*[.][0-9]+)|([0-9]+)	return Parser::NUM;
"define"										return Parser::DEFINE;
"domain"										return Parser::DOMAIN;
":requirements"									return Parser::REQUIREMENTS;
":strips"										return Parser::STRIPS;
":typing"										return Parser::TYPING;
":negative-preconditions"						return Parser::NEGATIVE_PRECONDITIONS;
":disjunctive-preconditions"					return Parser::DISJUNCTIVE_PRECONDITIONS;
":equality"										return Parser::EQUALITY;
":existential-preconditions"					return Parser::EXISTENTIAL_PRECONDITIONS;
":universal-preconditions"						return Parser::UNIVERSAL_PRECONDITIONS;
":quantified-preconditions"						return Parser::QUANTIFIED_PRECONDITIONS;
":conditional-effects"							return Parser::CONDITIONAL_EFFECTS;
":fluents"										return Parser::FLUENTS;
":numeric-fluents"								return Parser::NUMERIC_FLUENTS;
":object-fluents"								return Parser::OBJECT_FLUENTS;
":adl"											return Parser::ADL;
":durative-actions"								return Parser::DURATIVE_ACTIONS;
":duration-inequalities"						return Parser::DURATION_INEQUALITIES;
":continuous-effects"							return Parser::CONTINUOUS_EFFECTS;
":derived-predicates"							return Parser::DERIVED_PREDICATES;
":timed-initial-literals"						return Parser::TIMED_INITIAL_LITERALS;
":preferences"									return Parser::PREFERENCES;
":constraints"									return Parser::CONSTRAINTS;
":action-costs"									return Parser::ACTION_COSTS;
":temporally-extended"							return Parser::TEMPORALLY_EXTENDED;
":types"										return Parser::TYPES;
":constants"									return Parser::CONSTANTS;
":predicates"									return Parser::PREDICATES;
":functions"									return Parser::FUNCTIONS;
"number"										return Parser::NUMBER;
"object"										return Parser::OBJECT;
"either"										return Parser::EITHER;
":action"										return Parser::ACTION;
":parameters"									return Parser::PARAMETERS;
":precondition"									return Parser::PRECONDITION;
":effect"										return Parser::EFFECT;
"and"											return Parser::AND;
"forall"										return Parser::FORALL;
"preference"									return Parser::PREFERENCE;
"or"											return Parser::OR;
"not"											return Parser::NOT;
"imply"											return Parser::IMPLY;
"exists"										return Parser::EXISTS;
"when"											return Parser::WHEN;
"assign"										return Parser::ASSIGN;
"undefined"										return Parser::UNDEFINED;
"scale-up"										return Parser::SCALE_UP;
"scale-down"									return Parser::SCALE_DOWN;
"increase"										return Parser::INCREASE;
"decrease"										return Parser::DECREASE;
":durative-action"								return Parser::DURATIVE_ACTION;
":duration"										return Parser::DURATION;
":condition"									return Parser::CONDITION;
"at"											return Parser::AT;
"over"											return Parser::OVER;
"supported"										return Parser::SUPPORTED;
"forbidden"										return Parser::FORBIDDEN;
"somewhere"										return Parser::SOMEWHERE;
"anywhere"										return Parser::ANYWHERE;
"minimal-duration"								return Parser::MINIMAL_DURATION;
"->over"										return Parser::TRANSITION_OVER;
"-"												return Parser::MINUS;
"start"											return Parser::START;
"end"											return Parser::END;
"all"											return Parser::ALL;
"?duration"										return Parser::Q_M_DURATION;
"?"												return Parser::Q_M;
":derived"										return Parser::DERIVED;
"problem"										return Parser::PROBLEM;
":domain"										return Parser::DD_DOMAIN;
":objects"										return Parser::OBJECTS;
":init"											return Parser::INIT;
":goal"											return Parser::GOAL;
"always"										return Parser::ALWAYS;
"sometime"										return Parser::SOMETIME;
"within"										return Parser::WITHIN;
"at-most-once"									return Parser::AT_MOST_ONCE;
"sometime-after"								return Parser::SOMETIME_AFTER;
"sometime-before"								return Parser::SOMETIME_BEFORE;
"always-within"									return Parser::ALWAYS_WITHIN;
"hold-during"									return Parser::HOLD_DURING;
"hold-after"									return Parser::HOLD_AFTER;
":metric"										return Parser::METRIC;
"minimize"										return Parser::MINIMIZE;
"maximize"										return Parser::MAXIMIZE;
"total-time"									return Parser::TOTAL_TIME;
"is-violated"									return Parser::IS_VIOLATED;
":length"										return Parser::LENGTH;
":serial"										return Parser::SERIAL;
"parallel"										return Parser::PARALLEL;
":timepoints"									return Parser::TIMEPOINTS;
":timealiases"									return Parser::TIMEALIASES;
":timeconstraints"								return Parser::TIMECONSTRAINTS;
[[:alpha:]][a-zA-Z0-9_^-]*						return Parser::NAME;
[;]+.*[\n]										/* ignores comments */
[\n]											/* ignores excessive new lines */
[\t]+											/* ignores excessive tabulations */
[ ]+											/* ignores excessive spaces */
.
